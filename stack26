Next Smaller Element
Easy
Marks Available: 20.00
Given an array, find the Next Smaller Element (NSE) for every element of an array. The NSE for an element x is the first smaller element on the right side of x in the array. Elements for which no smaller element exist (on the right side), consider NSE as -1.

Example 1:

Input : arr=[5,4,6,1,2]
Output: [4,1,1,-1,-1]
Explanation: The next smaller element to the right side of 5,4 and 6 are 4 ,1 ,1 respectively. There is no any smaller element to the right side of 1 and 2 so -1 in the answer. 
Example 2:

Input: arr=[11,13,21,3]
Output: [3,3,3,-1]
Constriants:

1<= size of array <= 100000
1 <= arr[i] <= 10000

‚úÖ Java Code:
java
Copy
Edit
import java.util.*;

class NextSmallerElement {
    public int[] nextSmallerElements(int[] arr) {
        int n = arr.length;
        int[] result = new int[n];
        Stack<Integer> stack = new Stack<>();

        // Traverse from right to left
        for (int i = n - 1; i >= 0; i--) {
            // Pop all elements greater than or equal to arr[i]
            while (!stack.isEmpty() && stack.peek() >= arr[i]) {
                stack.pop();
            }

            // If stack is empty, no smaller element to the right
            result[i] = stack.isEmpty() ? -1 : stack.peek();

            // Push current element onto the stack
            stack.push(arr[i]);
        }

        return result;
    }

    // Sample usage
    public static void main(String[] args) {
        NextSmallerElement nse = new NextSmallerElement();

        int[] input1 = {5, 4, 6, 1, 2};
        int[] result1 = nse.nextSmallerElements(input1);
        System.out.println(Arrays.toString(result1)); // Output: [4, 1, 1, -1, -1]

        int[] input2 = {11, 13, 21, 3};
        int[] result2 = nse.nextSmallerElements(input2);
        System.out.println(Arrays.toString(result2)); // Output: [3, 3, 3, -1]
    }
}
üí° How It Works:
Traverse the array from right to left.

Use a stack to maintain a monotonically increasing sequence (smallest on top).

For each element:

Pop elements from the stack until you find a smaller one or stack is empty.

The top of the stack (if any) is the Next Smaller Element.

Push current element onto the stack for future comparisons.

üß† Example:
Input: [5, 4, 6, 1, 2]

vbnet
Copy
Edit
Right to Left:
2 ‚Üí no smaller ‚Üí -1
1 ‚Üí no smaller ‚Üí -1
6 ‚Üí 1 is smaller ‚Üí 1
4 ‚Üí 1 is smaller ‚Üí 1
5 ‚Üí 4 is smaller ‚Üí 4
Output: [4, 1, 1, -1, -1]

‚è± Complexity:
Time: O(n)

Space: O(n) for the stack and result array

