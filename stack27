Implement Queue using Stacks
Easy
Marks Available: 20.00
Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).

Implement the MyQueue class:

void push(int x) Pushes element x to the back of the queue.
int pop() Removes the element from the front of the queue and returns it.
int peek() Returns the element at the front of the queue.
boolean empty() Returns true if the queue is empty, false otherwise.
Notes:

You must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid.
Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.
 

Example 1:

Input
["MyQueue", "push", "push", "peek", "pop", "empty"]
[[], [1], [2], [], [], []]
Output
[null, null, null, 1, 1, false]

Explanation
MyQueue myQueue = new MyQueue();
myQueue.push(1); // queue is: [1]
myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)
myQueue.peek(); // return 1
myQueue.pop(); // return 1, queue is [2]
myQueue.empty(); // return false
 

Constraints:

1 <= x <= 9
At most 100 calls will be made to push, pop, peek, and empty.
All the calls to pop and peek are valid.
 

Follow-up: Can you implement the queue such that each operation is amortized O(1) time complexity? In other words, performing n operations will take overall O(n) time even if one of those operations may take longer.



‚úÖ Java Code: Queue Using Two Stacks
java
Copy
Edit
import java.util.Stack;

class MyQueue {
    private Stack<Integer> stackIn;  // For enqueue
    private Stack<Integer> stackOut; // For dequeue

    public MyQueue() {
        stackIn = new Stack<>();
        stackOut = new Stack<>();
    }

    // Push element x to the back of queue
    public void push(int x) {
        stackIn.push(x);
    }

    // Removes the element from in front of queue and returns that element
    public int pop() {
        shiftStacks();
        return stackOut.pop();
    }

    // Get the front element
    public int peek() {
        shiftStacks();
        return stackOut.peek();
    }

    // Returns whether the queue is empty
    public boolean empty() {
        return stackIn.isEmpty() && stackOut.isEmpty();
    }

    // Transfer elements from stackIn to stackOut only if stackOut is empty
    private void shiftStacks() {
        if (stackOut.isEmpty()) {
            while (!stackIn.isEmpty()) {
                stackOut.push(stackIn.pop());
            }
        }
    }

    // Sample usage
    public static void main(String[] args) {
        MyQueue queue = new MyQueue();
        queue.push(1);        // Queue: [1]
        queue.push(2);        // Queue: [1, 2]
        System.out.println(queue.peek()); // Output: 1
        System.out.println(queue.pop());  // Output: 1
        System.out.println(queue.empty()); // Output: false
    }
}
üí° Explanation:
stackIn handles all incoming elements.

stackOut handles dequeue/peek operations.

Elements are transferred from stackIn to stackOut only when stackOut is empty. This lazy transfer ensures amortized O(1) performance.

üß† Example:
text
Copy
Edit
Input: ["MyQueue", "push", "push", "peek", "pop", "empty"]
       [[], [1], [2], [], [], []]

Output: [null, null, null, 1, 1, false]
push(1): stackIn = [1]

push(2): stackIn = [1, 2]

peek(): transfer to stackOut = [2, 1] ‚Üí return 1

pop(): pop from stackOut = 1

empty(): false (stackOut has 2)

‚è± Time Complexity:
Push: O(1)

Pop / Peek: Amortized O(1)

Empty: O(1)
