Remove K Digits
Difficulty
Medium
Marks Available
20.0
Solve Problem
Problem Description
Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.

 

Example 1:

Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.
Example 2:

Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.
Example 3:

Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.
 

Constraints:

1 <= k <= num.length <= 105
num consists of only digits.
num does not have any leading zeros except for the zero itself.


âœ… Java Code
java
Copy
Edit
import java.util.*;

class RemoveKDigits {
    public String removeKdigits(String num, int k) {
        // Edge case
        if (k >= num.length()) return "0";

        Deque<Character> stack = new ArrayDeque<>();

        for (char digit : num.toCharArray()) {
            // Remove digits from the stack if they are greater than the current digit
            // and we still have digits to remove (k > 0)
            while (!stack.isEmpty() && k > 0 && stack.peekLast() > digit) {
                stack.pollLast();
                k--;
            }
            stack.addLast(digit);
        }

        // If we still need to remove digits, remove from the end
        while (k > 0 && !stack.isEmpty()) {
            stack.pollLast();
            k--;
        }

        // Build the result string and remove leading zeros
        StringBuilder sb = new StringBuilder();
        boolean leadingZero = true;
        for (char digit : stack) {
            if (leadingZero && digit == '0') continue;
            leadingZero = false;
            sb.append(digit);
        }

        // If result is empty, return "0"
        return sb.length() == 0 ? "0" : sb.toString();
    }

    public static void main(String[] args) {
        RemoveKDigits sol = new RemoveKDigits();

        System.out.println(sol.removeKdigits("1432219", 3)); // Output: "1219"
        System.out.println(sol.removeKdigits("10200", 1));   // Output: "200"
        System.out.println(sol.removeKdigits("10", 2));      // Output: "0"
    }
}
ðŸ’¡ Explanation:
Goal: Remove k digits to get the smallest number.

Approach:

Use a monotonic increasing stack.

For each digit:

If the top of the stack is greater than the current digit and we still have digits to remove, pop it.

Push current digit to the stack.

After processing all digits, remove remaining k digits from the end if needed.

Finally, build the result string and remove leading zeros.

ðŸ“Š Time & Space Complexity:
Time: O(n), where n is the length of the input string.

Space: O(n), for the stack and result.

ðŸ§ª Test Cases:
Input	k	Output
"1432219"	3	"1219"
"10200"	1	"200"
"10"	2	"0"
"123456"	3	"123"
"7654321"	3	"4321"

