Moving Average from Data Stream
Medium
Marks Available: 20.00
Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window.

Implement the MovingAverage class:

MovingAverage(int size) Initializes the object with the size of the window size.
double next(int val) Returns the moving average of the last size values of the stream.
Example 1:

Input: 
 ["MovingAverage", "next", "next", "next", "next"]
 [[3], [1], [10], [3], [5]]Output: [null, 1.00000, 5.50000, 4.66667, 6.00000] 
Explanation: MovingAverage movingAverage = new MovingAverage(3);

movingAverage.next(1); // return 1.0 = 1 / 1

movingAverage.next(10); // return 5.5 = (1 + 10) / 2

movingAverage.next(3); // return 4.66667 = (1 + 10 + 3) / 3

movingAverage.next(5); // return 6.0 = (10 + 3 + 5) / 3
Constraints:

1 <= size <= 1000
‚àí
10
5
‚àí10 
5
  <= val <= 
10
5
10 
5
 
At most 
10
4
10 
4
  calls will be made to next.


  ‚úÖ Java Code:
java
Copy
Edit
import java.util.*;

class MovingAverage {
    private Queue<Integer> window;
    private int maxSize;
    private double sum;

    public MovingAverage(int size) {
        this.window = new LinkedList<>();
        this.maxSize = size;
        this.sum = 0.0;
    }

    public double next(int val) {
        window.offer(val);
        sum += val;

        if (window.size() > maxSize) {
            sum -= window.poll(); // remove oldest
        }

        return sum / window.size();
    }
}
üß™ Example:
java
Copy
Edit
Input:
["MovingAverage", "next", "next", "next", "next"]
[[3], [1], [10], [3], [5]]

Output:
[null, 1.0, 5.5, 4.66667, 6.0]
‚è± Time & Space Complexity:
Time Complexity: O(1) for each next() call.

Space Complexity: O(size) ‚Äî to store the elements in the window.

