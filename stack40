Sliding Window Maximum
Hard
Marks Available: 20.00
You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

Return the max sliding window.

 

Example 1:

Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
Example 2:

Input: nums = [1], k = 1
Output: [1]
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
1 <= k <= nums.length


‚úÖ Java Solution Using Deque
java
Copy
Edit
import java.util.*;

public class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if (nums == null || k <= 0)
            return new int[0];

        int n = nums.length;
        int[] result = new int[n - k + 1];
        int ri = 0;

        Deque<Integer> deque = new ArrayDeque<>();

        for (int i = 0; i < n; i++) {
            // Remove elements out of this window
            while (!deque.isEmpty() && deque.peek() < i - k + 1)
                deque.poll();

            // Remove smaller elements in k range as they are useless
            while (!deque.isEmpty() && nums[deque.peekLast()] < nums[i])
                deque.pollLast();

            deque.offer(i);

            // Window has reached size k, start adding results
            if (i >= k - 1)
                result[ri++] = nums[deque.peek()];
        }

        return result;
    }
}
üß† Explanation
deque stores indices of elements in the window.

Before adding a new element:

Remove indices that are out of window (i - k + 1).

Remove indices from the back whose corresponding values are less than the current element.

The front of the deque always contains the index of the maximum element for the current window.

üß™ Example
java
Copy
Edit
Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
‚è± Time and Space Complexity
Time: O(n), since each element is added and removed from the deque at most once.

Space: O(k), for the deque.
